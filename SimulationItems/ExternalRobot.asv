classdef ExternalRobot<Robots
    %ExternalRobot Summary of this class goes here
    %   Detailed explanation goes here


    methods
        function obj = ExternalRobot(Tag,Loc,max_speed,min_speed,robottype,roving_energy_max,roving_energy_min)
            obj.ID=obj.TrackObject()+1;
            obj.TrackObject(obj.ID);
            obj.Type="MobileObject";
            obj.SubType="ExternalRobot";
            obj.Tag=Tag;
            obj.RobotType=robottype;
            %% Robot's Permance Parameters
            obj.BatteryLevel=100;
            obj.MaxEnergy=100;
            obj.Speed.Max=max_speed;
            obj.Speed.Min=min_speed;
            obj.FullPath=obj.InternalRobotPath();
            obj.HomeLocation=Loc; % Parking Location
            obj.Loc=Loc; % Current Location
            obj.Map=obj.ExternalRobotMap();
            obj=obj.CreateGraphicsobj();
            obj.RovingEnergy.Max=roving_energy_max;
            obj.RovingEnergy.Min=roving_energy_min;
            obj.TaskList=[];
            obj.Mode="Idle";
        end
        %% Start the robot and do health diagonisis
        function obj=Start(obj)
            obj.Mode="Moving";
            if strcmp(obj.Task,"Patrol")
                obj.LocalPath=obj.FullPath;
            else
                obj.TargetList=[obj.Target;obj.HomeLocation];
            end
        end

        function obj=Update(obj)
            %% This function updates the robot status
            obj=obj.AssignSpeed();
            if  strcmp(obj.Mode,"Wait")
                switch convertStringsToChars(obj.Task)
                    case 'FireFighting'
                        obj=obj.FireFighting();
                    case 'AsstetManagement'
                        obj.Target=obj.TargetList;
                        obj.TargetList=[];

                end
            elseif isempty(obj.LocalPath) && ~isempty(obj.TaskList)
                obj=obj.PathPlanning();
                obj.PowerConsumptionRate=obj.RovingEnergy.Min*0.10;
                obj.Mode="Moving";
                obj.Move();
            elseif strcmp(obj.Task,"Patrol")
                obj=obj.Patrol();
            elseif strcmp(obj.Mode,"Moving")
                obj=obj.Move();

            end


        end
       
        function obj=PathPlanning(obj)
            %% Path planning
            planner=plannerAStarGrid(obj.Map);
            rng('default');

            robot_Path=plan(planner,flip(obj.Loc),flip(obj.Target));
            %          figure(3)
            %          show(planner)
            obj.LocalPath=[robot_Path(:,2) robot_Path(:,1)];
        end
      
        function obj=TargetUpdate(obj)
       %% Updating target location
            if isempty(obj.TargetList)
                obj.Target=obj.HomeLocation;
            else
                 Cu_Target=ismember(obj.TargetList, obj.Target,"rows");
                 obj.TargetList(Cu_Target,:)=[];
                 if size(obj.TargetList)>1
                     obj.Target=obj.TargetList(1,:);
                     obj.TargetList=obj.TargetList(2:end,:);
                 else
                     switch convertStringsToChars(obj.Task)
                         case 'FireFighting'
                             EnvM=obj.FRData();
                             if  max(Location.Temp(),[],'all')>27 && EnvM(1)>=0 
                                 obj.Mode="Wait";
                             else
                                 obj.Target=obj.TargetList;
                                 obj.TargetList=[]; 
                                 obj.Mode="Moving";
                             end
                         case 'AsstetManagement'
                              obj.Target=obj.TargetList;
                              obj.TargetList=[];
                      
                     end
                 end
            end
        end
        
        
       function obj=PowerconsumptionUpdate(obj)
            if strcmp(obj.Status,"LowPower")
                obj.BatteryLevel=obj.BatteryLevel-(obj.PowerConsumptionRate*0.001);
            else
                obj.BatteryLevel=obj.BatteryLevel-obj.PowerConsumptionRate;
                obj=obj.CheckBatteryLevel();
            end
        end
    end
end